# -*- coding: utf-8 -*-
"""CITIZEN AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EEJ4_5eJeKLtPcUhRmHkMo0ploYKA_Y6
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# -----------------------------
# Load IBM Granite Model
# -----------------------------
model_name = "ibm-granite/granite-3.2-2b-instruct"

print("üîÑ Loading IBM Granite model, please wait...")
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

print("‚úÖ IBM Granite model loaded successfully!")

# -----------------------------
# Fake user database (demo only)
# -----------------------------
users = {}  # empty initially
current_user = {"name": None}

# -----------------------------
# AI Functions
# -----------------------------
def generate_response(prompt, max_length=512):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()

def city_analysis(city_name):
    if not city_name.strip():
        return "‚ö†Ô∏è Please enter a valid city name."
    prompt = (
        f"Provide a detailed analysis of {city_name}, covering:\n"
        f"- Crime index and safety statistics\n"
        f"- Accident rates and traffic safety\n"
        f"- Overall safety assessment\n\n"
        f"City: {city_name}\nAnalysis:"
    )
    return generate_response(prompt, max_length=600)

def citizen_interaction(query):
    if not query.strip():
        return "‚ö†Ô∏è Please enter a valid query."
    prompt = (
        f"As a government assistant, provide accurate and clear information about:\n\n"
        f"Query: {query}\nResponse:"
    )
    return generate_response(prompt, max_length=600)

# -----------------------------
# Auth Functions
# -----------------------------
def signup(username, password):
    if not username or not password:
        return "‚ö†Ô∏è Both fields are required.", gr.update(), gr.update()
    if username in users:
        return "‚ö†Ô∏è Username already exists. Please login.", gr.update(), gr.update()
    users[username] = password
    return f"‚úÖ Account created for {username}. Now login.", gr.update(visible=True), gr.update(visible=False)

def login(username, password):
    if username in users and users[username] == password:
        current_user["name"] = username
        return f"‚úÖ Welcome, {username}!", gr.update(visible=True), gr.update(visible=False)
    else:
        return "‚ùå Invalid login. Try again.", gr.update(), gr.update()

# -----------------------------
# Build Gradio App
# -----------------------------
with gr.Blocks(
    css="""
    body {
        background-color: #e6f2ff;   /* light blue background */
        font-family: Arial, sans-serif;
    }
    .main-title {
        text-align:center;
        font-size:2.5em;
        font-weight:bold;
        color:black;
    }
    .card {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.15);
        margin: 30px auto;
        max-width: 700px;

    }
    """
) as app:
    gr.Markdown("<h1 class='main-title'>üèôÔ∏è CitizenAI</h1>")

    # Signup Page (default visible)
    with gr.Column(visible=True, elem_classes="card") as signup_section:
        gr.Markdown("## üìù Sign Up")
        gr.Markdown("Create a new account to access CitizenAI.")
        signup_user = gr.Textbox(label="New Username")
        signup_pass = gr.Textbox(label="New Password", type="password")
        signup_btn = gr.Button("Sign Up")
        signup_msg = gr.Markdown("")

    # Login Page (hidden until after signup)
    with gr.Column(visible=False, elem_classes="card") as login_section:
        gr.Markdown("## üîë Login")
        gr.Markdown("Enter your username and password to continue.")
        login_user = gr.Textbox(label="Username")
        login_pass = gr.Textbox(label="Password", type="password")
        login_btn = gr.Button("Login")
        login_msg = gr.Markdown("")

    # Main App (hidden until login success)
    with gr.Column(visible=False, elem_classes="card") as main_app:
        gr.Markdown("## üåü Welcome to CitizenAI ‚Äì Empowering Citizens Through AI")

        with gr.Tabs():
            # --- Home Tab ---
            with gr.TabItem("üè† Home"):
                with gr.Row():
                    with gr.Column():
                        gr.Markdown("### CitizenAI Home")
                        gr.Markdown(
                            "Welcome to **CitizenAI**, your AI-powered civic assistant.\n\n"
                            "**Features:**\n"
                            "1. üåÜ City Analysis ‚Äì crime index, accidents, safety.\n"
                            "2. üì¢ Citizen Services ‚Äì ask about policies & services.\n"
                            "3. üîç Smart Guidance ‚Äì AI-powered responses.\n\n"
                            "Stay informed. Stay safe. Stay empowered. üöÄ"
                        )
                    with gr.Column():
                        # Add your picture here (make sure the file exists)
                        gr.Image("/content/img/ai image.jpg", label="", show_label=False)

            # --- City Analysis Tab ---
            with gr.TabItem("üåÜ City Analysis"):
                with gr.Row():
                    with gr.Column():
                        city_input = gr.Textbox(
                            label="Enter City Name",
                            placeholder="e.g., New York, London, Mumbai..."
                        )
                        analyze_btn = gr.Button("üîç Analyze City")
                    with gr.Column():
                        city_output = gr.Textbox(label="City Analysis", lines=12)

                analyze_btn.click(city_analysis, inputs=city_input, outputs=city_output)

            # --- Citizen Services Tab ---
            with gr.TabItem("üì¢ Citizen Services"):
                with gr.Row():
                    with gr.Column():
                        citizen_query = gr.Textbox(
                            label="Your Query",
                            placeholder="Ask about services, policies, civic issues...",
                            lines=4
                        )
                        query_btn = gr.Button("Ask")
                    with gr.Column():
                        citizen_output = gr.Textbox(label="Government Response", lines=12)

                query_btn.click(citizen_interaction, inputs=citizen_query, outputs=citizen_output)

    # Button Actions
    signup_btn.click(signup, inputs=[signup_user, signup_pass], outputs=[signup_msg, login_section, signup_section])
    login_btn.click(login, inputs=[login_user, login_pass], outputs=[login_msg, main_app, login_section])

# -----------------------------
# Launch
# -----------------------------
if __name__ == "__main__":
    app.launch(share=True)